name: CI

on: [push, pull_request]

jobs:
  Pre-Commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Set Cache Key
      run: echo "PY=$(python --version --version | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
    - name: Install System Deps
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2 libxml2-dev libxslt-dev
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
    - uses: pre-commit/action@v1.0.1

  Twine-Check:
    runs-on: ubuntu-latest
    needs: Pre-Commit

    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        pip install --upgrade pip setuptools wheel
        pip install twine>=3.4.1
    - name: Python setup
      run: |
        python3 setup.py sdist
    - name: Twine check
      run: |
        python3 -m twine check dist/*

  PyLint:
    runs-on: ubuntu-latest
    needs: Pre-Commit

    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Lint Requirements
      run: |
        nox --force-color -e lint --install-only

    - name: Build Docs
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e lint

  Docs:
    runs-on: ubuntu-latest
    needs: Pre-Commit

    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Doc Requirements
      run: |
        nox --force-color -e docs --install-only

    - name: Build Docs
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e docs

  Linux:
    runs-on: ubuntu-latest
    needs: Pre-Commit

    timeout-minutes: 15

    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version:
          - "3.5"
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Test Requirements
      run: |
        nox --force-color -e tests-3 --install-only

    - name: Test
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-3 -- -vv tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info)))")

    - name: Upload Project Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},project
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-project
        REPORT_PATH: artifacts/coverage-project.xml
      run: |
        if [ "$(which curl)x" == "x" ]; then
            echo "Failed to find the 'curl' binary"
            exit 0
        fi

        if [ "$(which gpg)x" == "x" ]; then
            echo "Failed to find the 'gpg' binary"
            exit 0
        fi

        if [ "$(which shasum)x" == "x" ]; then
            echo "Failed to find the 'shasum' binary"
            exit 0
        fi

        if [ ! -x codecov-linux ]; then
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-linux --output codecov-linux; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-linux.SHA256SUM --output codecov-linux.SHA256SUM; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-linux.SHA256SUM.sig --output codecov-linux.SHA256SUM.sig; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            gpg --verify codecov-linux.SHA256SUM.sig codecov-linux.SHA256SUM && \
                shasum -a 256 -c codecov-linux.SHA256SUM && \
                chmod +x codecov-linux || exit 0
        fi
        if [ -x codecov-linux ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if ./codecov-linux -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},tests
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ "$(which curl)x" == "x" ]; then
            echo "Failed to find the 'curl' binary"
            exit 0
        fi

        if [ "$(which gpg)x" == "x" ]; then
            echo "Failed to find the 'gpg' binary"
            exit 0
        fi

        if [ "$(which shasum)x" == "x" ]; then
            echo "Failed to find the 'shasum' binary"
            exit 0
        fi

        if [ ! -x codecov-linux ]; then
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-linux --output codecov-linux; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-linux.SHA256SUM --output codecov-linux.SHA256SUM; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-linux.SHA256SUM.sig --output codecov-linux.SHA256SUM.sig; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            gpg --verify codecov-linux.SHA256SUM.sig codecov-linux.SHA256SUM && \
                shasum -a 256 -c codecov-linux.SHA256SUM && \
                chmod +x codecov-linux || exit 0
        fi
        if [ -x codecov-linux ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if ./codecov-linux -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}.log
        path: artifacts/runtests-*.log

  Windows:
    runs-on: windows-latest
    needs: Pre-Commit

    timeout-minutes: 40

    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Test Requirements
      shell: bash
      env:
        EXTRA_REQUIREMENTS_INSTALL: Cython
      run: |
        export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
        nox --force-color -e tests-3 --install-only

    - name: Test
      shell: bash
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
        nox --force-color -e tests-3 -- -vv tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info)))")

    - name: Download Code Coverage Tool
      if: always()
      shell: powershell
      run: |
        If (-not(Test-Path -Path ./codecov.exe)) {
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12, [Net.SecurityProtocolType]::Ssl3
          [Net.ServicePointManager]::SecurityProtocol = "Tls, Tls11, Tls12, Ssl3"

          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri https://keybase.io/codecovsecurity/pgp_keys.asc -OutFile codecov.asc
          gpg.exe --import codecov.asc

          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile codecov.exe
          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe.SHA256SUM -Outfile codecov.exe.SHA256SUM
          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe.SHA256SUM.sig -Outfile codecov.exe.SHA256SUM.sig

          gpg.exe --verify codecov.exe.SHA256SUM.sig codecov.exe.SHA256SUM
          If ($(Compare-Object -ReferenceObject  $(($(certUtil -hashfile codecov.exe SHA256)[1], "codecov.exe") -join "  ") -DifferenceObject $(Get-Content codecov.exe.SHA256SUM)).length -eq 0) {
              echo "SHASUM verified"
          } Else {
              exit 0
          }
        }

    - name: Upload Project Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},project
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-project
        REPORT_PATH: artifacts/coverage-project.xml
      run: |
        if [ -x codecov.exe ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if ./codecov.exe -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},tests
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ -x codecov.exe ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if ./codecov.exe -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}.log
        path: artifacts/runtests-*.log

  macOS:
    runs-on: macOS-latest
    needs: Pre-Commit

    timeout-minutes: 40

    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Test Requirements
      run: |
        nox --force-color -e tests-3 --install-only

    - name: Test
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-3 -- -vv tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info)))")

    - name: Upload Project Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},project
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-project
        REPORT_PATH: artifacts/coverage-project.xml
      run: |
        if [ "$(which curl)x" == "x" ]; then
            echo "Failed to find the 'curl' binary"
            exit 0
        fi

        if [ "$(which gpg)x" == "x" ]; then
            echo "Failed to find the 'gpg' binary"
            exit 0
        fi

        if [ "$(which shasum)x" == "x" ]; then
            echo "Failed to find the 'shasum' binary"
            exit 0
        fi

        if [ ! -x codecov-macos ]; then
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-macos --output codecov-macos; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-macos.SHA256SUM --output codecov-macos.SHA256SUM; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-macos.SHA256SUM.sig --output codecov-macos.SHA256SUM.sig; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            gpg --verify codecov-macos.SHA256SUM.sig codecov-macos.SHA256SUM && \
                shasum -a 256 -c codecov-macos.SHA256SUM && \
                chmod +x codecov-macos || exit 0
        fi
        if [ -x codecov-macos ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if ./codecov-macos -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},tests
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ "$(which curl)x" == "x" ]; then
            echo "Failed to find the 'curl' binary"
            exit 0
        fi

        if [ "$(which gpg)x" == "x" ]; then
            echo "Failed to find the 'gpg' binary"
            exit 0
        fi

        if [ "$(which shasum)x" == "x" ]; then
            echo "Failed to find the 'shasum' binary"
            exit 0
        fi

        if [ ! -x codecov-macos ]; then
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-macos --output codecov-macos; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-macos.SHA256SUM --output codecov-macos.SHA256SUM; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://uploader.codecov.io/latest/codecov-macos.SHA256SUM.sig --output codecov-macos.SHA256SUM.sig; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            n=0
            until [ "$n" -ge 5 ]
            do
            if curl --max-time 30 -L https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import; then
                break
            fi
            n=$((n+1))
            sleep 15
            done
            gpg --verify codecov-macos.SHA256SUM.sig codecov-macos.SHA256SUM && \
                shasum -a 256 -c codecov-macos.SHA256SUM && \
                chmod +x codecov-macos || exit 0
        fi
        if [ -x codecov-macos ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if ./codecov-macos -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}.log
        path: artifacts/runtests-*.log
